import org.junit.Ignore;
import org.junit.Test;

import java.util.*;

import static com.google.common.collect.Lists.newArrayList;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.*;

public class SolutionTest {

    private final Solution solution = new Solution();

    @Ignore
    @Test
    public void getRowReturnsPascalsTriangle(){

        List<Integer> actual = solution.getRow(2);
        assertThat(actual.get(0), is(1));
    }

//    @Test
//    public  void sortedInsertReturnsPointerToSortedDoublyLinkedList(){
//        Solution.DoublyLinkedListNode result = solution.sortedInsert(null, 0);
//    }

    @Test
    public void reverseStringReturnsCharArrayInReverse(){
        char[] array = new char[] {'h', 'k', 'e', 'l', 'j', 'o'};
        solution.reverseString(array);
        assertThat(array[0], is('o'));
        assertThat(array[5], is('h'));
    }

    @Test
    public void removeElementReturnsCorrectArray(){
        assertThat(solution.removeElement(new int[] {0,1,2,2,3,0,4,2}, 2), is(5));
    }

    @Test
    public void sockMerchantReturnsCorrectCountOfPair(){
        assertThat(solution.sockMerchant(9, new int[]{10, 20, 20, 10, 10, 30, 50, 10, 20}), is(3));
    }

    @Test
    public void permutationEquationReturnsCorrectPermutation(){
        int[] actual = solution.permutationEquation(new int[]{5,2,1,3,4});
        int[] expected = new int[]{4,2,5,1,3};
        assertThat(actual, is(expected));
    }

    @Test
    public void signalClassificationClassifiesSignalCorrectly(){
        List<Integer> actual = solution.classifySignals(newArrayList(7, 1, 12, 9, 15), newArrayList(2, 9, 2000, 13, 4));
        List<Integer> expected = newArrayList(2,4,5,3,1);
        assertThat(actual, is(expected));
        actual = solution.classifySignals(newArrayList(2, 3, 1, 4, 8), newArrayList(1, 5, 6));
        expected = newArrayList(3,4,5);
        assertThat(actual, is(expected));
    }

    @Test
    public void countingPairs(){
        Solution.countPairs(newArrayList(1,1,2,2,3,3), 1);
    }

    @Test
    public void finalInstances(){
        Solution.finalInstances(5, newArrayList(30,5,4,8,19,89));
        Solution.finalInstances(2, newArrayList(25, 23,1,2,3,4,5,6,7,8,9,10,76,80));
        Solution.finalInstances(174, newArrayList(81,49,94,88,86,78,77,16,73,81,40,40,97,52,70,88,82,3,60,19,37,75,18,79,46,2,90,83,79,74,9,38,42,99,68,89,5,12,39,70,94,40,12,97,62,11,37,28,49,67,27,86,54,96,87,14,51,51,37,4,71,5,33,58,98,12,97,37,67,60,40,35,18,11,79,21,93,79,0,50,33,75,9,68,12,33,1,27,56,80,90,98,79));
        Solution.finalInstances(174, newArrayList(81,41,77,2,18,54,15,64,86,63,91,49,94,18,39,68,69,38,44,69,18,93,97,88,82,80,52,57,89,8,7,1,89,3,86,16,72,37,77,24,47,4,69,44,82,78,74,76,22,70,15,8,53,60,33,20,77,49,49,23,75,11,21,99,1,83,41,16,58,23,38,70,89,10,46,64,93,15,73,6,71,12,36,87,8,23,28,16,77,81,25,7,84,48,0,7,89,61,29,66,40,40,97,29,73,0,87,45,41,13,42,66,83,52,70,4,72,80,54,27,18,90,70,99,71,88,72,44,52,33,24,72,95,20,59,46,82,78,73,98,85,56,91,51,55,26,35,3,76,93,15,29,33,3,90,95,64,64,60,19,82,75,52,11,78,91,96,60,96,63,37,75,58,93,97,85,10,86,65,33,64,88,18,88,17,96,49,4,76,74,97,3,67,79,26,74,22,45,88,97,56,89,38,70,46,2,75,17,68,32,85,18,24,27,44,93,90,61,29,1,90,81,84,85,28,89,46,83,1,11,79,77,32,39,51,12,72,0,79,47,41,48,3,21,26,70,5,27,36,74,32,12,6,49,87,49,4,30,64,6,9,11,52,42,55,13,35,80,8,64,27,38,42,99,82,79,75,70,89,23,36,55,12,58,68,6,14,66,40,4,51,88,10,38,29,89,50,92,39,84,3,72,13,75,38,31,5,39,64,22,16,48,93,80,11,9,29,12,75,0,98,4,68,9,82,81,96,80,39,70,99,80,84,1,63,34,61,9,3,54,94,45,41,52,44,69,22,9,24,95,49,40,12,67,92,92,83,94,14,59,69,64,35,97,23,96,42,78,72,46,36,48,44,31,62,44,84,59,60,6,98,79,51,98,70,11,88,34,81,99,78,66,84,98,87,71,37,28,49,67,26,0,11,24,2,64,5,91,37,36,27,86,70,88,34,41,90,6,7,38,54,51,54,96,57,53,50,45,54,41,91,14,3,85,87,86,73,64,75,85,87,33,41,52,76,14,86,62,22,39,56,17,60,65,44,69,51,51,37,4,79,70,35,23,84,24,82,87,36,83,71,8,19,71,12,38,60,77,30,45,37,5,90,54,71,95,85,94,30,69,49,40,33,58,98,25,72,93,94,47,16,38,3,97,4,12,29,57,15,34,32,29,8,58,54,78,97,24,53,7,83,64,3,15,7,73,56,37,67,15,12,61,79,79,77,83,46,74,43,60,40,35,18,14,98,61,12,21,64,0,92,31,93,11,10,4,12,18,92,2,34,96,8,2,79,56,11,52,78,51,17,7,15,1,93,21,99,62,48,22,11,39,82,83,72,93,93,20,99,96,92,89,27,91,78,45,4,79,83,48,58,61,38,32,33,85,61,30,0,89,66,30,51,53,42,34,62,20,31,50,33,75,46,21,33,4,33,75,92,98,13,72,9,95,47,9,61,2,94,76,15,54,21,68,10,90,25,49,95,43,25,88,21,19,12,15,97,55,42,20,93,23,91,84,44,33,1,86,15,35,36,20,23,17,90,29,94,27,56,80,70,30,27,3,16,96,87,75,93,44,90,11,67,68,7,31,9,67,77,84,20,98,34,13,93,22,69,52,19,73,60,73,79,65,41,70,16));
    }

    @Test
    public void  floodfillTest(){
        int[][] image = {{1,1,1},{1,1,0},{1,0,1}};
        solution.floodFill(image, 1, 1, 2);
    }

    @Test
    public void storageTest(){
        solution.storage(6,6,newArrayList(4),newArrayList(2));
    }

    @Test
    public void addTwoDigitsTest(){
        assertEquals(24,solution.addDigits(2985));
    }

    @Test
    public void twoSumTest(){
        int[] input = new int[]{3,2,4};
        assertEquals(solution.twoSum(input, 6)[0], 1);
        assertEquals(solution.twoSum(input, 6)[1], 2);
    }

    @Test
    public void sortedSquareTest(){
        int[] input = new int[]{-4,-1,0,3,10};
        assertEquals(solution.sortedSquares(input)[2],3);
        input = new int[]{-7,-3,2,3,11};
        assertEquals(solution.sortedSquares(input)[2],3);
    }

    @Test
    public void maxProfitTest() {
        //int[] input = new int[]{7,1,5,3,6,4};
        //int[] input = new int[]{2,1,4};
        //int[] input = new int[]{2,1,2,1,0,1,2};
        //int[] input = new int[]{3,3,5,0,0,3,1,4};
        int[] input = new int[]{4,11,2,1,7};
        assertEquals(solution.maxProfit(input), 7);

    }

    @Test
    public void containsDuplicateTest(){
        int[] input = new int[]{1,2,3,1};
        assertEquals(solution.containsDuplicate(input), true);
    }

    @Test
    public void sleepSortTest(){
        //int[] input = new int[]{7,1,5,3,6,4};
        int[] input = new int[]{1,2,3,1};
        List<Integer> expected = Solution.sleepSort(input);
        try {
            Thread.sleep(7000);
            assertEquals(java.util.Optional.ofNullable(expected.get(0)), 1);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void maxSubArrayTest(){
        int[] input = new int[]{-2,3,1,3};
        assertEquals(solution.maxSubArray(input), 7);
    }

//    @Test
//    public void removeDuplicateLetters(){
//        String s = "bcabc";
//        assertEquals(solution.removeDuplicateLetters(s), "abc");
//    }

    @Test
    public void maxEventsTest(){
        ArrayList<Integer> arrival = newArrayList(978,409,229,934,299,982,636,14,866,815,64,537,426,670,116,95,630);
        ArrayList<Integer> duration = newArrayList(502,518,196,106,405,452,299,189,124,506,883,753,567,717,338,439,145);
        assertEquals(4, solution.maxEvents(arrival,duration));
    }
    @Test
    public void sumZeroTest(){
        //assertEquals(solution.sumZero(1).length, 1);
        assertEquals(solution.sumZero(4).length, 4);
    }

    @Test
    public void findShortestSubArray() {
        //int[] input = new int[]{1,2,2,3,1};
        int[] input = new int[]{1,2,2,3,1,4,2};
        assertEquals(solution.findShortestSubArray(input), 2);
    }

    @Test
    public void coinChangeTest(){
        //int[] input = new int[]{1,2,5};
        //int[] input = new int[]{2,5, 10, 1};
        int[] input = new int[]{186,419,83,408};
        assertEquals(20, solution.coinChange(input, 6249));
    }

@Test
    public void solnTest(){
        assertEquals(1, solution.soln("01010"));
}

@Test
    public void subsetTest(){
        int[] input = new int[]{1,2,3,4};
        assertEquals(16, solution.subsets(input).size());
}

    @Test
    public void subsetWithDupTest(){
        int[] input = new int[]{1,2,3,4,5,6,7,8,10,0};
        assertEquals(1024, solution.subsetsWithDup(input).size());
    }

    @Test
    public void minimalHeaviestSetATest(){
        List<Integer> input = new ArrayList(Arrays.asList( 3534 , 3534 , 3535 , 3537 , 3540 , 3540 , 3541 , 3541 , 3542 , 3542 , 3542 , 3543 , 3543 , 3545 , 3545 , 3548 , 3548 , 3548 , 3549 , 3549 , 3550 , 3550 , 3550 , 3551 , 3552 , 3552 , 3552 , 3553 , 3553 , 3554 , 3554 , 3554 , 3554 , 3555 , 3556 , 3556 , 3557 , 3557 , 3558 , 3558 , 3559 , 3559 , 3559 , 3560 , 3561 , 3562 , 3563 , 3563 , 3563 , 3564 , 3565 , 3566 , 3566 , 3568 , 3568 , 3569 , 3570 , 3570 , 3571 , 3571 , 3571 , 3571 , 3571 , 3572 , 3572 , 3574 , 3575 , 3575 , 3576 , 3576 , 3577 , 3577 , 3577 , 3578 , 3580 , 3580 , 3580 , 3581 , 3581 , 3582 , 3584 , 3584 , 3586 , 3587 , 3587 , 3588 , 3589 , 3590 , 3591 , 3591 , 3592 , 3593 , 3593 , 3595 , 3595 , 3596 , 3596 , 3598 , 3599 , 3599 , 3601 , 3601 , 3603 , 3605 , 3606 , 3606 , 3606 , 3607 , 3608 , 3610 , 3610 , 3611 , 3611 , 3611 , 3613 , 3613 , 3613 , 3614 , 3614 , 3614 , 3614 , 3616 , 3617 , 3618 , 3619 , 3620 , 3621 , 3622 , 3622 , 3623 , 3624 , 3624 , 3626 , 3626 , 3626 , 3626 , 3627 , 3627 , 3627 , 3627 , 3628 , 3628 , 3628 , 3628 , 3629 , 3630 , 3632 , 3632 , 3632 , 3632 , 3633 , 3637 , 3638 , 3639 , 3639 , 3640 , 3640 , 3641 , 3641 , 3643 , 3643 , 3643 , 3644 , 3644 , 3644 , 3645 , 3646 , 3646 , 3647 , 3647 , 3648 , 3648 , 3649 , 3650 , 3653 , 3654 , 3654 , 3654 , 3654 , 3655 , 3655 , 3656 , 3656 , 3656 , 3658 , 3658 , 3659 , 3660 , 3660 , 3661 , 3662 , 3663 , 3663 , 3665 , 3665 , 3666 , 3668 , 3669 , 3670 , 3670 , 3670 , 3671 , 3672 , 3673 , 3673 , 3673 , 3674 , 3674 , 3676 , 3677 , 3677 , 3678 , 3679 , 3679 , 3679 , 3679 , 3680 , 3681 , 3682 , 3682 , 3684 , 3684 , 3684 , 3685 , 3687 , 3687 , 3689 , 3689 , 3691 , 3691 , 3691 , 3691 , 3692 , 3692 , 3693 , 3694 , 3694 , 3694 , 3694 , 3695 , 3695 , 3697 , 3697 , 3697 , 3697 , 3699 , 3700 , 3702 , 3702 , 3702 , 3703 , 3703 , 3707 , 3708 , 3708 , 3710 , 3711 , 3712 , 3713 , 3715 , 3715 , 3715 , 3716 , 3716 , 3717 , 3717 , 3717 , 3718 , 3719 , 3719 , 3720 , 3722 , 3722 , 3723 , 3723 , 3723 , 3725 , 3725 , 3726 , 3726 , 3727 , 3728 , 3728 , 3729 , 3729 , 3730 , 3732 , 3732 , 3736 , 3738 , 3740 , 3740 , 3741 , 3741 , 3743 , 3744 , 3744 , 3746 , 3746 , 3747 , 3747 , 3748 , 3748 , 3748 , 3748 , 3749 , 3749 , 3750 , 3750 , 3750 , 3751 , 3752 , 3752 , 3752 , 3752 , 3753 , 3756 , 3756 , 3757 , 3757 , 3758 , 3762 , 3763 , 3763 , 3763 , 3764 , 3764 , 3764 , 3765 , 3765 , 3765 , 3765 , 3766 , 3766 , 3766 , 3767 , 3767 , 3768 , 3768 , 3769 , 3769 , 3770 , 3770 , 3770 , 3771 , 3772 , 3772 , 3774 , 3774 , 3774 , 3774 , 3774 , 3776 , 3776 , 3778 , 3782 , 3783 , 3784 , 3784 , 3785 , 3785 , 3785 , 3786 , 3787 , 3789 , 3790 , 3791 , 3791 , 3791 , 3792 , 3793 , 3794 , 3794 , 3795 , 3795 , 3795 , 3796 , 3796 , 3796 , 3797 , 3797 , 3797 , 3798 , 3798 , 3799 , 3799 , 3801 , 3804 , 3804 , 3805 , 3807 , 3807 , 3807 , 3808 , 3809 , 3809 , 3812 , 3812 , 3812 , 3815 , 3816 , 3817 , 3817 , 3819 , 3819 , 3820 , 3820 , 3821 , 3821 , 3822 , 3822 , 3823 , 3824 , 3824 , 3825 , 3825 , 3826 , 3827 , 3828 , 3828 , 3829 , 3830 , 3830 , 3832 , 3832 , 3833 , 3833 , 3834 , 3834 , 3835 , 3835 , 3836 , 3839 , 3839 , 3840 , 3840 , 3841 , 3842 , 3842 , 3842 , 3844 , 3844 , 3844 , 3845 , 3846 , 3846 , 3846 , 3847 , 3847 , 3848 , 3848 , 3848 , 3848 , 3849 , 3850 , 3850 , 3852 , 3853 , 3853 , 3853 , 3854 , 3855 , 3855 , 3856 , 3857 , 3857 , 3858 , 3858 , 3859 , 3859 , 3860 , 3860 , 3861 , 3861 , 3862 , 3864 , 3864 , 3864 , 3866 , 3867 , 3867 , 3867 , 3867 , 3867 , 3867 , 3868 , 3868 , 3869 , 3869 , 3870 , 3870 , 3871 , 3871 , 3872 , 3873 , 3874 , 3875 , 3875 , 3877 , 3880 , 3880 , 3881 , 3881 , 3882 , 3885 , 3885 , 3885 , 3886 , 3886 , 3888 , 3888 , 3889 , 3889 , 3891 , 3891 , 3891 , 3891 , 3892 , 3893 , 3894 , 3896 , 3898 , 3899 , 3899 , 3900 , 3900 , 3900 , 3901 , 3901 , 3902 , 3902 , 3902 , 3903 , 3905 , 3905 , 3906 , 3906 , 3907 , 3907 , 3909 , 3913 , 3914 , 3914 , 3916 , 3917 , 3917 , 3918 , 3918 , 3919 , 3920 , 3920 , 3921 , 3922 , 3923 , 3923 , 3924 , 3924 , 3924 , 3925 , 3925 , 3925 , 3925 , 3926 , 3928 , 3928 , 3930 , 3931 , 3932 , 3932 , 3933 , 3933 , 3934 , 3936 , 3936 , 3937 , 3937 , 3938 , 3939 , 3939 , 3939 , 3940 , 3940 , 3941 , 3942 , 3942 , 3942 , 3943 , 3944 , 3944 , 3945 , 3946 , 3946 , 3946 , 3947 , 3947 , 3952 , 3954 , 3954 , 3954 , 3954 , 3954 , 3955 , 3956 , 3956 , 3956 , 3957 , 3957 , 3957 , 3958 , 3958 , 3958 , 3958 , 3958 , 3959 , 3959 , 3960 , 3960 , 3961 , 3962 , 3963 , 3963 , 3964 , 3964 , 3965 , 3965 , 3965 , 3966 , 3967 , 3968 , 3968 , 3969 , 3969 , 3973 , 3973 , 3973 , 3973 , 3974 , 3976 , 3977 , 3978 , 3978 , 3978 , 3981 , 3981 , 3982 , 3983 , 3984 , 3985 , 3985 , 3986 , 3986 , 3986 , 3988 , 3989 , 3989 , 3990 , 3990 , 3991 , 3992 , 3994 , 3994 , 3994 , 3994 , 3994 , 3996 , 3996 , 3997 , 3997 , 3998 , 3999 , 3999 , 3999 , 3999 , 3999 , 4000 , 4002 , 4004 , 4004 , 4004 , 4006 , 4007 , 4007 , 4008 , 4010 , 4011 , 4011 , 4011 , 4012 , 4012 , 4013 , 4015 , 4016 , 4016 , 4018 , 4019 , 4019 , 4020 , 4021 , 4023 , 4024 , 4024 , 4024 , 4026 , 4026 , 4027 , 4027 , 4027 , 4028 , 4029 , 4032 , 4033 , 4033 , 4034 , 4034 , 4034 , 4035 , 4036 , 4036 , 4036 , 4037 , 4037 , 4039 , 4039 , 4040 , 4040 , 4040 , 4041 , 4041 , 4042 , 4042 , 4042 , 4044 , 4044 , 4045 , 4045 , 4045 , 4046 , 4046 , 4047 , 4047 , 4048 , 4049 , 4049 , 4050 , 4050 , 4053 , 4053 , 4053 , 4053 , 4053 , 4054 , 4054 , 4054 , 4055 , 4056 , 4056 , 4057 , 4057 , 4059 , 4060 , 4061 , 4061 , 4062 , 4062 , 4062 , 4063 , 4063 , 4064 , 4065 , 4065 , 4067 , 4070 , 4070 , 4070 , 4071 , 4071 , 4071 , 4071 , 4072 , 4073 , 4073 , 4075 , 4077 , 4078 , 4079 , 4079 , 4081 , 4083 , 4085 , 4086 , 4086 , 4086 , 4087 , 4087 , 4087 , 4088 , 4088 , 4089 , 4089 , 4089 , 4089 , 4090 , 4090 , 4091 , 4091 , 4092 , 4092 , 4092 , 4092 , 4092 , 4093 , 4094 , 4094 , 4094 , 4094 , 4095 , 4097 , 4097 , 4097 , 4097 , 4099 , 4099 , 4100 , 4101 , 4101 , 4103 , 4103 , 4103 , 4104 , 4104 , 4104 , 4104 , 4105 , 4105 , 4105 , 4105 , 4106 , 4106 , 4106 , 4107 , 4107 , 4109 , 4109 , 4109 , 4111 , 4112 , 4112 , 4113 , 4115 , 4115 , 4115 , 4115 , 4115 , 4115 , 4116 , 4116 , 4116 , 4116 , 4116 , 4118 , 4118 , 4121 , 4121 , 4121 , 4122 , 4122 , 4122 , 4123 , 4124 , 4124 , 4126 , 4126 , 4130 , 4131 , 4131 , 4132 , 4132 , 4133 , 4135 , 4136 , 4136 , 4137 , 4138 , 4140 , 4142 , 4142 , 4143 , 4144 , 4145 , 4146 , 4146 , 4146 , 4146 , 4147 , 4148 , 4149 , 4150 , 4150 , 4150 , 4151 , 4151 , 4152 , 4152 , 4153 , 4153 , 4155 , 4155 , 4156 , 4156 , 4156 , 4156 , 4156 , 4157 , 4157 , 4158 , 4158 , 4159 , 4161 , 4161 , 4161 , 4162 , 4163 , 4164 , 4164 , 4165 , 4165 , 4166 , 4166 , 4167 , 4168 , 4168 , 4168 , 4169 , 4170 , 4172 , 4172 , 4172 , 4172 , 4173 , 4173 , 4173 , 4173 , 4173 , 4173 , 4174 , 4174 , 4175 , 4175 , 4175 , 4175 , 4176 , 4177 , 4179 , 4179 , 4180 , 4180 , 4182 , 4183 , 4184 , 4184 , 4184 , 4184 , 4185 , 4185 , 4187 , 4187 , 4188 , 4190 , 4191 , 4192 , 4193 , 4195 , 4195 , 4195 , 4196 , 4196 , 4196 , 4197 , 4198 , 4198 , 4199 , 4200 , 4200 , 4201 , 4201 , 4202 , 4203 , 4203 , 4204 , 4205 , 4208 , 4208 , 4208 , 4208 , 4209 , 4209 , 4210 , 4210 , 4211 , 4212 , 4213 , 4213 , 4213 , 4213 , 4214 , 4214 , 4214 , 4217 , 4217 , 4217 , 4218 , 4219 , 4219 , 4219 , 4220 , 4220 , 4220 , 4222 , 4222 , 4223 , 4224 , 4224 , 4224 , 4224 , 4224 , 4225 , 4226 , 4228 , 4228 , 4230 , 4231 , 4232 , 4232 , 4235 , 4235 , 4235 , 4236 , 4236 , 4237 , 4237 , 4239 , 4239 , 4240 , 4240 , 4240 , 4240 , 4241 , 4241 , 4241 , 4241 , 4241 , 4242 , 4242 , 4242 , 4242 , 4242 , 4242 , 4242 , 4243 , 4244 , 4244 , 4244 , 4244 , 4246 , 4248 , 4249 , 4250 , 4250 , 4251 , 4251 , 4251 , 4252 , 4252 , 4252 , 4253 , 4253 , 4253 , 4254 , 4254 , 4255 , 4256 , 4257 , 4257 , 4257 , 4259 , 4261 , 4261 , 4262 , 4262 , 4262 , 4262 , 4263 , 4267 , 4267 , 4267 , 4268 , 4268 , 4268 , 4268 , 4270 , 4270 , 4270 , 4272 , 4273 , 4273 , 4274 , 4275 , 4276 , 4276 , 4276 , 4277 , 4277 , 4278 , 4278 , 4279 , 4279 , 4279 , 4281 , 4281 , 4282 , 4283 , 4283 , 4283 , 4284 , 4284 , 4285 , 4285 , 4285 , 4285 , 4285 , 4285 , 4285 , 4286 , 4291 , 4291 , 4292 , 4293 , 4294 , 4294 , 4294 , 4295 , 4295 , 4296 , 4296 , 4296 , 4297 , 4298 , 4299 , 4299 , 4300 , 4303 , 4303 , 4304 , 4305 , 4305 , 4305 , 4306 , 4306 , 4307 , 4307 , 4307 , 4312 , 4312 , 4312 , 4313 , 4313 , 4313 , 4315 , 4316 , 4317 , 4318 , 4319 , 4319 , 4319 , 4321 , 4321 , 4321 , 4322 , 4323 , 4324 , 4324 , 4324 , 4325 , 4326 , 4326 , 4327 , 4328 , 4328 , 4330 , 4330 , 4330 , 4334 , 4334 , 4335 , 4336 , 4336 , 4337 , 4338 , 4339 , 4340 , 4341 , 4342 , 4343 , 4344 , 4344 , 4345 , 4345 , 4345 , 4345 , 4345 , 4345 , 4346 , 4348 , 4349 , 4350 , 4350 , 4351 , 4352 , 4353 , 4353 , 4353 , 4354 , 4355 , 4355 , 4356 , 4358 , 4358 , 4359 , 4360 , 4360 , 4361 , 4361 , 4362 , 4363 , 4363 , 4363 , 4364 , 4364 , 4365 , 4365 , 4366 , 4366 , 4367 , 4368 , 4368 , 4369 , 4370 , 4370 , 4371 , 4372 , 4372 , 4372 , 4374 , 4374 , 4374 , 4374 , 4375 , 4375 , 4377 , 4378 , 4380 , 4381 , 4382 , 4382 , 4382 , 4383 , 4383 , 4384 , 4384 , 4384 , 4384 , 4385 , 4387 , 4387 , 4388 , 4389 , 4389 , 4389 , 4390 , 4391 , 4391 , 4392 , 4395 , 4395 , 4396 , 4397 , 4398 , 4400 , 4400 , 4401 , 4401 , 4403 , 4403 , 4403 , 4403 , 4404 , 4405 , 4405 , 4406 , 4406 , 4407 , 4407 , 4409 , 4409 , 4414 , 4414 , 4414 , 4414 , 4415 , 4415 , 4415 , 4416 , 4416 , 4417 , 4417 , 4419 , 4420 , 4420 , 4420 , 4420 , 4422 , 4422 , 4423 , 4423 , 4423 , 4423 , 4424 , 4424 , 4425 , 4425 , 4425 , 4425 , 4426 , 4427 , 4428 , 4428 , 4429 , 4432 , 4432 , 4433 , 4433 , 4435 , 4435 , 4435 , 4437 , 4437 , 4439 , 4439 , 4441 , 4441 , 4442 , 4443 , 4443 , 4443 , 4444 , 4444 , 4445 , 4445 , 4446 , 4449 , 4449 , 4451 , 4451 , 4451 , 4452 , 4452 , 4453 , 4453 , 4454 , 4455 , 4456 , 4456 , 4457 , 4460 , 4460 , 4460 , 4462 , 4463 , 4463 , 4464 , 4465 , 4466 , 4466 , 4466 , 4466 , 4467 , 4467 , 4467 , 4468 , 4469 , 4470 , 4470 , 4471 , 4472 , 4472 , 4472 , 4473 , 4473 , 4473 , 4474 , 4475 , 4477 , 4477 , 4478 , 4479 , 4480 , 4480 , 4481 , 4482 , 4483 , 4486 , 4487 , 4487 , 4490 , 4490 , 4490 , 4491 , 4491 , 4492 , 4492 , 4493 , 4495 , 4497 , 4499 , 4502 , 4504 , 4504 , 4504 , 4505 , 4506 , 4507 , 4508 , 4508 , 4508 , 4508 , 4509 , 4509 , 4509 , 4510 , 4511 , 4512 , 4512 , 4512 , 4513 , 4513 , 4514 , 4514 , 4514 , 4516 , 4516 , 4516 , 4516 , 4517 , 4518 , 4518 , 4519 , 4519 , 4520 , 4522 , 4522 , 4524 , 4524 , 4525 , 4526 , 4526 , 4528 , 4528 , 4529 , 4529 , 4530 , 4530 , 4533 , 4533 , 4536 , 4536 , 4536 , 4537 , 4538 , 4538 , 4539 , 4541 , 4542 , 4544 , 4545 , 4547 , 4548 , 4548 , 4549 , 4549 , 4549 , 4550 , 4551 , 4552 , 4552 , 4553 , 4553 , 4554 , 4555 , 4555 , 4555 , 4556 , 4557 , 4557 , 4557 , 4558 , 4558 , 4559 , 4559 , 4560 , 4560 , 4560 , 4561 , 4561 , 4562 , 4564 , 4564 , 4564 , 4565 , 4565 , 4566 , 4567 , 4568 , 4569 , 4570 , 4570 , 4570 , 4570 , 4571 , 4571 , 4572 , 4572 , 4572 , 4573 , 4573 , 4574 , 4574 , 4575 , 4575 , 4576 , 4577 , 4577 , 4578 , 4580 , 4583 , 4584 , 4585 , 4586 , 4586 , 4586 , 4588 , 4589 , 4590 , 4590 , 4591 , 4592 , 4592 , 4592 , 4592 , 4593 , 4594 , 4595 , 4595 , 4596 , 4596 , 4596 , 4597 , 4598 , 4600 , 4601 , 4601 , 4601 , 4602 , 4603 , 4604 , 4605 , 4605 , 4606 , 4606 , 4607 , 4607 , 4608 , 4608 , 4608 , 4610 , 4610 , 4611 , 4612 , 4613 , 4615 , 4615 , 4615 , 4615 , 4615 , 4615 , 4615 , 4616 , 4617 , 4618 , 4619 , 4620 , 4620 , 4620 , 4621 , 4622 , 4622 , 4623 , 4627 , 4629 , 4630 , 4631 , 4631 , 4632 , 4633 , 4633 , 4634 , 4634 , 4635 , 4636 , 4637 , 4637 , 4637 , 4637 , 4638 , 4639 , 4639 , 4639 , 4639 , 4640 , 4640 , 4641 , 4642 , 4642 , 4642 , 4646 , 4647 , 4648 , 4648 , 4648 , 4648 , 4650 , 4650 , 4651 , 4651 , 4651 , 4653 , 4653 , 4653 , 4654 , 4654 , 4655 , 4656 , 4656 , 4657 , 4657 , 4658 , 4659 , 4659 , 4659 , 4659 , 4660 , 4662 , 4662 , 4662 , 4662 , 4662 , 4663 , 4663 , 4664 , 4664 , 4665 , 4666 , 4666 , 4667 , 4668 , 4669 , 4669 , 4669 , 4669 , 4673 , 4673 , 4675 , 4675 , 4675 , 4676 , 4679 , 4679 , 4681 , 4682 , 4682 , 4683 , 4684 , 4685 , 4685 , 4686 , 4687 , 4689 , 4689 , 4689 , 4689 , 4689 , 4690 , 4691 , 4691 , 4693 , 4693 , 4695 , 4696 , 4696 , 4696 , 4696 , 4697 , 4697 , 4697 , 4698 , 4698 , 4700 , 4700 , 4701 , 4702 , 4702 , 4704 , 4705 , 4705 , 4705 , 4705 , 4705 , 4705 , 4706 , 4706 , 4706 , 4708 , 4708 , 4710 , 4710 , 4712 , 4712 , 4713 , 4714 , 4715 , 4716 , 4716 , 4718 , 4718 , 4719 , 4719 , 4719 , 4719 , 4720 , 4720 , 4722 , 4723 , 4723 , 4723 , 4724 , 4727 , 4727 , 4727 , 4728 , 4728 , 4728 , 4729 , 4730 , 4731 , 4731 , 4732 , 4734 , 4735 , 4735 , 4735 , 4735 , 4736 , 4737 , 4738 , 4738 , 4739 , 4739 , 4740 , 4740 , 4742 , 4742 , 4743 , 4743 , 4743 , 4744 , 4745 , 4747 , 4747 , 4747 , 4749 , 4749 , 4749 , 4750 , 4750 , 4750 , 4751 , 4752 , 4752 , 4753 , 4753 , 4753 , 4754 , 4754 , 4755 , 4757 , 4758 , 4759 , 4762 , 4764 , 4764 , 4764 , 4765 , 4766 , 4767 , 4767 , 4767 , 4767 , 4768 , 4770 , 4770 , 4772 , 4772 , 4773 , 4773 , 4773 , 4773 , 4773 , 4774 , 4775 , 4776 , 4776 , 4779 , 4780 , 4780 , 4781 , 4783 , 4784 , 4784 , 4784 , 4785 , 4786 , 4787 , 4787 , 4789 , 4790 , 4790 , 4790 , 4790 , 4790 , 4792 , 4793 , 4795 , 4795 , 4796 , 4796 , 4797 , 4797 , 4799 , 4799 , 4799 , 4801 , 4803 , 4803 , 4804 , 4805 , 4805 , 4805 , 4806 , 4806 , 4806 , 4806 , 4807 , 4808 , 4809 , 4809 , 4810 , 4811 , 4812 , 4812 , 4813 , 4813 , 4814 , 4818 , 4819 , 4819 , 4821 , 4821 , 4821 , 4822 , 4823 , 4823 , 4823 , 4823 , 4824 , 4825 , 4825 , 4825 , 4825 , 4827 , 4827 , 4827 , 4827 , 4829 , 4829 , 4829 , 4830 , 4830 , 4831 , 4832 , 4833 , 4833 , 4834 , 4835 , 4836 , 4836 , 4837 , 4838 , 4838 , 4838 , 4838 , 4839 , 4840 , 4842 , 4843 , 4843 , 4843 , 4843 , 4843 , 4843 , 4844 , 4845 , 4846 , 4846 , 4847 , 4848 , 4849 , 4850 , 4850 , 4850 , 4851 , 4851 , 4851 , 4853 , 4853 , 4853 , 4853 , 4854 , 4855 , 4856 , 4858 , 4860 , 4861 , 4862 , 4864 , 4864 , 4864 , 4865 , 4866 , 4866 , 4868 , 4868 , 4869 , 4869 , 4869 , 4869 , 4870 , 4870 , 4870 , 4871 , 4871 , 4874 , 4874 , 4875 , 4875 , 4875 , 4876 , 4876 , 4876 , 4876 , 4877 , 4877 , 4878 , 4880 , 4880 , 4880 , 4880 , 4881 , 4881 , 4882 , 4883 , 4883 , 4883 , 4884 , 4885 , 4885 , 4887 , 4888 , 4888 , 4889 , 4891 , 4891 , 4891 , 4892 , 4892 , 4892 , 4893 , 4894 , 4896 , 4896 , 4897 , 4899 , 4899 , 4901 , 4902 , 4902 , 4903 , 4907 , 4908 , 4909 , 4910 , 4910 , 4911 , 4911 , 4915 , 4916 , 4918 , 4918 , 4920 , 4921 , 4921 , 4921 , 4921 , 4922 , 4923 , 4923 , 4923 , 4924 , 4925 , 4925 , 4926 , 4927 , 4927 , 4929 , 4929 , 4929 , 4929 , 4930 , 4930 , 4931 , 4931 , 4932 , 4933 , 4933 , 4934 , 4935 , 4936 , 4936 , 4936 , 4937 , 4937 , 4939 , 4939 , 4939 , 4940 , 4940 , 4941 , 4942 , 4942 , 4943 , 4943 , 4943 , 4943 , 4945 , 4945 , 4945 , 4946 , 4948 , 4948 , 4948 , 4950 , 4950 , 4951 , 4951 , 4953 , 4954 , 4955 , 4955 , 4956 , 4958 , 4958 , 4959 , 4959 , 4959 , 4960 , 4960 , 4963 , 4963 , 4964 , 4965 , 4966 , 4967 , 4968 , 4969 , 4970 , 4970 , 4970 , 4974 , 4975 , 4976 , 4976 , 4977 , 4977 , 4978 , 4978 , 4979 , 4979 , 4979 , 4979 , 4979 , 4980 , 4980 , 4981 , 4981 , 4982 , 4982 , 4983 , 4984 , 4984 , 4985 , 4986 , 4986 , 4987 , 4988 , 4989 , 4989 , 4990 , 4991 , 4992 , 4994 , 4994 , 4994 , 4994 , 4994 , 4995 , 4995 , 4995 , 4996 , 4996 , 4998 , 4998 , 4999 , 4999 , 4999 , 5000 , 5000 ));
        assertEquals(Collections.emptySet(), solution.minimalHeaviestSetA(input));
    }

    @Test
    public void countGroups(){
        List<String> input = new ArrayList(Arrays.asList("1100", "1110", "0110", "0001"));
        assertEquals(Collections.emptySet(), solution.countGroups(input));

    }

    @Test
    public void kClosestTest(){
        int[][] points = new int[3][2];
        points[0][0] = 1;
        points[0][1] = 3;
        points[1][0] = -2;
        points[1][1] = 2;
        points[2][0] = 2;
        points[2][1] = -2;
        assertEquals(2, solution.kClosest(points, 2).length);
    }

    @Test
    public void topKFrequentTest() {
        int[] nums1 = new int[]{1,1,1,2,2,3};
        int[] nums2 = new int[]{1,2};
        assertEquals(nums2, solution.topKFrequent(nums1, 2));
    }

    @Test
    public void findMedianSortedArraysTest() {
        int[] nums1 = new int[]{1,2};
        int[] nums2 = new int[]{3,4};
        assertEquals(2.5, solution.findMedianSortedArrays(nums1, nums2), 0);
    }

    @Test
    public void getIntervalsTest(){
        solution.getIntervals();
    }

    @Test
    public void mergeTest(){
        int[][] inputs = new int[3][2];
//        inputs[0][0] = 1;
//        inputs[0][1] = 3;
//        inputs[1][0] = 2;
//        inputs[1][1] = 6;
//        inputs[2][0] =8;
//        inputs[2][1] = 10;
//        inputs[3][0] = 15;
//        inputs[3][1] = 18;
        inputs[0][0] = 1;
        inputs[0][1] = 4;
        inputs[1][0] = 0;
        inputs[1][1] = 2;
        inputs[2][0] =3;
        inputs[2][1] = 5;

        solution.merge(inputs);
    }

    @Test
    public void connectTest(){
        Solution.Node node1 = new Solution.Node(1);
        Solution.Node node2 = new Solution.Node(2);
        Solution.Node node3 = new Solution.Node(3);
        Solution.Node node4 = new Solution.Node(4);
        Solution.Node node5 = new Solution.Node(5);
        Solution.Node node6 = new Solution.Node(6);
        Solution.Node node7 = new Solution.Node(7);
        node1.left = node2;
        node1.right = node3;
        node2.left = node4;
        node2.right=node5;
        node3.left = node6;
        node3.right = node7;
        solution.connect(node1);
    }

     @Test
    public void rangeSumBSTTest(){
        Solution.TreeNode node1 = new Solution.TreeNode(18);
        Solution.TreeNode node2 = new Solution.TreeNode(9);
        Solution.TreeNode node3 = new Solution.TreeNode(27);
        Solution.TreeNode node4 = new Solution.TreeNode(6);
        Solution.TreeNode node5 = new Solution.TreeNode(15);
        Solution.TreeNode node6 = new Solution.TreeNode(24);
        Solution.TreeNode node7 = new Solution.TreeNode(30);
        Solution.TreeNode node8 = new Solution.TreeNode(3);
        Solution.TreeNode node9 = new Solution.TreeNode(12);
        Solution.TreeNode node10 = new Solution.TreeNode(21);
        node1.left = node2;
        node1.right = node3;
        node2.left = node4;
        node2.right=node5;
        node3.left = node6;
        node3.right = node7;
        node4.left = node8;
        node5.left = node9;
        node6.left = node10;
        assertEquals(18, solution.rangeSumBST(node1, 18, 24));
    }

    @Test
    public void permutationTest(){
        assertEquals(6, solution.permute(new int[]{1,2,3}).size());
    }
    @Test
    public void smallestPositiveIntegerTest(){
        //int[] input = new int[]{1,3,6,4,1,2};
        int[] input = new int[]{3,1,2};
        assertEquals(4, solution.smallestPositiveInteger(input));
    }

    @Test
    public void twitchTest(){
        solution.twitch("1048575 DUP +");
    }
}
